#include <AFMotor.h>
#include <NewPing.h>
#include <Servo.h>
#include <SoftwareSerial.h>

#define TRIG_PIN A5
#define ECHO_PIN A4
#define MAX_DISTANCE 200
#define MAX_SPEED 100
#define MIN_SPEED 0

NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);
AF_DCMotor motor1(1, MOTOR12_1KHZ);
AF_DCMotor motor2(3, MOTOR12_1KHZ);
Servo myservo; 
SoftwareSerial mySerial(A2, A3); // RX, TX

unsigned long currentTime = millis();
unsigned long previousTime = 0;
const int pingInterval = 30;
String data;
int btVal;
int Auto = 2;

void setup() {
  Serial.begin(9600);
  myservo.attach(9);
  myservo.write(90);
  delay(2000);
  mySerial.begin(9600);
  Serial.println("Hello...");
  mySerial.println("Hello...");
}

void loop() {
  if (mySerial.available()>0)
  {
    Serial.println("Blueetooth is connected");
    mySerial.println("Bluetooth is connected");
  }
  while(mySerial.available()>0)
  {
    Serial.println("Bluetooth is connected");
    data = mySerial.readStringUntil('\n');                 
    btVal = (data.toInt());
    Serial.print("BlueTooth Value ");
    Serial.println(btVal); 
    mySerial.print("BlueTooth Value ");
    mySerial.println(btVal);

    switch (btVal) 
   {
      case 1:                                
        Forward();
        break;

      case 2:                 
        Backward();
        break;

      case 3:
        Right();
        break;
        
      case 4:                     
        Left();
        break;
  }
  if (mySerial.available()==0)
  {
    Serial.println("No Bluetooth Data");
    Serial.println(data);
    mySerial.println("No Bluetooth Data");
    mySerial.println(data);
  }
  if(btVal == 6)
  {
    Auto = 1;
  }
  while(Auto == 1)
  {
    Serial.println("Explore");
    Serial.println("Bluetooth is connected");
    data = mySerial.readStringUntil('\n');                 
    btVal = (data.toInt());
    Serial.println("BlueTooth Value ");
    Serial.println(btVal);
    unsigned long currentTime = millis(); 
    if (btVal == 5)
    {
      Auto = 0;
    }
    if (currentTime - previousTime >= pingInterval)
      {
        previousTime = currentTime;
        int distance = readPing();
        if (distance <= 70)
          {
            int distanceRight = lookRight();
            int distanceLeft = lookLeft();              
            if (distanceRight > distanceLeft)
            {
              Right();
            }
            if (distanceLeft > distanceRight)
            {
              Left();
            }
            if (distanceLeft == distanceRight) 
            {
              Backward();
            }
          }
            else 
            {
              Forward();
            }
          }
  }
  }
}
void Stop()
{
  motor1.setSpeed(MIN_SPEED);
  motor2.setSpeed(MIN_SPEED);
}
void Forward()
{
  Serial.println("Forward");
  mySerial.println("Forward");
  motor1.setSpeed(MAX_SPEED);
  motor2.setSpeed(MAX_SPEED);
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  delay(1000);
  Stop();
}
void Backward()
{
  Serial.println("Backward");
  mySerial.println("Backward");
  motor1.setSpeed(MAX_SPEED);
  motor2.setSpeed(MAX_SPEED);
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  delay(1000);
  Stop();
}
void Left()
{
  Serial.println("Left");
  mySerial.println("Left");
  motor1.setSpeed(MAX_SPEED);
  motor2.setSpeed(MAX_SPEED);
  motor1.run(BACKWARD);
  motor2.run(FORWARD);
  delay(400);
  Stop();
}
void Right()
{          
  Serial.println("Right");
  mySerial.println("Right");
  motor1.setSpeed(MAX_SPEED);
  motor2.setSpeed(MAX_SPEED);
  motor1.run(FORWARD);
  motor2.run(BACKWARD);
  delay(400);
  Stop();
}
int readPing()
{
  delay(90);
  int cm = sonar.ping_cm();

  if (cm == 0)
  {
    cm = 250;
  }
  return cm;
}
int lookRight()
{
  myservo.write(0);
  delay(300);
  int distance = sonar.ping_cm();
  myservo.write(90);
  return distance;
}
int lookLeft()
{
  myservo.write(180);
  delay(300);
  int distance = sonar.ping_cm();
  myservo.write(90);
  return distance;
}
